openapi: 3.0.0
info:
  description: >
    This document specifies an **RESTful API for User Registration** in **WSO2 Identity Server** which can be used to perform complete user registration in an API based manner.
  version: 1.0.0
  title: WSO2 Identity Server - User Registration Rest API
  contact:
    name: WSO2
    url: 'https://wso2.com/products/identity-server/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /registration/initiate:
    post:
      operationId: initiateRegistration
      description: This API provides the capability to initiate a user registration according to the configurations of the application.
      requestBody:
        required: true
        description: User registration initiate request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitRegRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegPromptResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegCompleteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /registration/passthrough:
    post:
      operationId: passThroughRegistration
      description: This API provides the capability to continue communication of data for an initiated registration
      requestBody:
        required: true
        description: User registration initiate request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitRegRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegPromptResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegCompleteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    InitRegRequest:
      description: |
        The request object to initiate a registration flow configured against the given application id. If the end result of the user creation should be aligned with a specific protol, that must be indicated in the initial request.
      required:
        - flowType
        - applicationId
        - protocol
      properties:
        flowType:
          type: string
          description: Indicates the type of the current step in the flow.
          enum:
            - INITIATE
            - SUBMIT
          example: INITIATE
        applicationId:
          type: string
          description: The id of the application for which the useer registration is triggered. This will be used to retrieve the configured user registration flow.
          example: 3bd1f207-e5b5-4b45-8a91-13b0acfb2151
        protocol:
          type: string
          description: Indicates whether registration is followed to a specific standard or protocol. Based on that the final result of successful registration will be decided
          enum:
            - NONE
            - OIDC
          example: OIDC

    SubmitRegRequest:
      description: |
        The request object that will be communicated to the server as the intermediate steps associated with the registration flow. This will contain the user inputs for the attributes requested.
      required:
        - flowType
        - flowId
        - inputType
        - input
      properties:
        flowType:
          type: string
          description: Indicates the type of the current step in the flow.
          enum:
            - INITIATE
            - SUBMIT
          example: SUBMIT
        flowId:
          type: string
          description: A unique identifier for the registration flow returned from the server. This identifier will be used to track the continuation of the flow.
          example: d13ec8d2-2d1e-11ee-be56-0242ac120002
        inputType:
          type: string
          description: Indicates which type of data is submit as the input.
          enum:
            - SELECTION
            - USER_DATA
          example: SELECTION
        input:
          type: array
          items:
            $ref: '#/components/schemas/InputObject'

    InputObject:
      type: object
      description: The data entered by the user as required by the registration flow.
      required:
        - key
        - value
      properties:
        key:
          type: string
          example: username
        value:
          type: string
          example: johnd

    RegPromptResponse:
      type: object
      description: User registration intermediate response body.
      required:
        - flowId
        - flowStatus
        - currentStep
        - links
      properties:
        flowId:
          type: string
          description: A unique identifier for the registration flow returned from the server. This identifier will be used to track the continuation of the flow.
          example: d13ec8d2-2d1e-11ee-be56-0242ac120002
        flowStatus:
          type: string
          enum:
            - INCOMPLETE
            - FAILURE
          description: |
            The status of the registration flow.
            There is a seperate response modal for the COMPLETE state with user assertion related to be used in the authentication.
          example: INCOMPLETE
        currentStep:
          $ref: '#/components/schemas/CurrentStep'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          description: Contains the urls related to the registration flow.

    RegCompleteResponse:
      type: object
      description: User registration complete response body.
      required:
        - flowId
        - flowStatus
        - protocol
        - userAssertion
        - links
      properties:
        flowId:
          type: string
          description: A unique identifier for the registration flow returned from the server. This identifier will be used to track the continuation of the flow.
          example: d13ec8d2-2d1e-11ee-be56-0242ac120002
        flowStatus:
          type: string
          enum:
            - COMPLETE
          description: |
            The status of the registration flow. This will always be COMPLETE.
          example: COMPLETE
        protocol:
          type: string
          description: Indicates whether registration is followed to a specific standard or protocol. Based on that the final result of successful registration will be decided
          enum:
            - NONE
            - OIDC
          example: OIDC
        userAssertion:
          type: string
          description: An assertion for the newly created user based on the authentication protocol to be used for proceeding with the authentication. If the registration is not bound to any protocol, this will be null.
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          description: Contains the urls related to the registration flow and/or to proceed with the authentication flow.

    CurrentStep:
      type: object
      description: Contains the registration details related to the current step.
      properties:
        stepType:
          type: string
          enum:
            - MULTI_OPTIONS_PROMPT
            - SINGLE_OPTION_USER_PROMPT
            - AGG_OPTIONS_USER_PROMPT
          description: |
            The type of the current step in the registration flow.
            - MULTI_OPTIONS_PROMPT - The current step is for the selection of the registration option.
            - REGISTRATION_USER_PROMPT - The current step is for obtaining information from the user to proceed the registration
          example: SINGLE_OPTION_USER_PROMPT
        registrationComponents:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationComponent'

    RegistrationComponent:
      type: object
      description: Some description
      properties:
        name:
          type: string
          description: The name given to the registration component.
          example: Basic Attribute Collector
        id:
          type: string
          description: The unique identifier of the registration component.
          example: e54636fe-2f7a-11ee-be56-0242ac120002
        type:
          type: string
          description: The type of the registration component.
          example: Attribute Collection
        requiredParams:
          type: array
          items:
            $ref: '#/components/schemas/Param'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'

    Param:
      type: object
      description: Contains the data related to a required parameter in the registration step. This data can be used to render the registration UI and collect data from the user
      required:
        - name
        - type
        - isConfidential
        - isMandatory
        - order
        - validationRegex
        - i18nKey
      properties:
        name:
          type: string
          description: The parameter identifier.
          example: username
        type:
          type: string
          enum:
            - STRING
            - NUMBER
            - BOOLEAN
            - DATE
          description: Indicates the data type of the parameter.
          example: STRING
        isConfidential:
          type: boolean
          description: Indicates whether the parameter is confidential or not.
          example: false
        isMandatory:
          type: boolean
          description: Indicates whether the parameter is mandatory to be filled.
          example: true
        order:
          type: integer
          description: Indicates the recommended display order of the parameter.
          example: 1
        validationRegex:
          type: string
          description: Contains the regex pattern to validate the parameter value.
          example: ^[\S]{3,50}$
        i18nKey:
          type: string
          description: The i18n key for the parameter. This can be used to get the localized text for the parameter.
          example: param.username

    Message:
      type: object
      description: Contains the data related to a message in the registration step.
      required:
        - type
        - messageId
        - message
        - context
        - i18nKey
      properties:
        type:
          type: string
          enum:
            - INFO
            - ERROR
          description: Indicates the type of the message.
          example: ERROR
        messageId:
          type: string
          description: The message identifier.
          example: msg_invalid_username
        message:
          type: string
          description: The message.
          example: The username is not available.
        context:
          type: array
          items:
            $ref: '#/components/schemas/Context'
        i18nKey:
          type: string
          description: The i18n key for the message. This can be used to get the localized text for the message.
          example: error.invalid.username

    Context:
      type: object
      description: |
        Contains any context information related to the message. The context information can be used to create localized messages. The available different context information is bound to the messageId. ex - mobile number that the OTP is sent.
      required:
        - key
        - value
      properties:
        key:
          type: string
          example: maskedNumber
        value:
          type: string
          example: '+94*****466'

    Link:
      type: object
      description: Contains the data related to a link.
      required:
        - name
        - href
        - method
      properties:
        name:
          type: string
          description: The identifier of the link.
          example: registration
        href:
          type: string
          description: The relative url of the link.
          example: /api/registration/v1
        method:
          type: string
          enum:
            - GET
            - POST
          description: The supported http methods of the link.
          example: POST

    Error:
      type: object
      description: Contains the data related to an error.
      required:
        - code
        - message
        - description
        - traceId
      properties:
        code:
          type: string
          example: ABA-00000
        message:
          type: string
          example: Some error message.
        description:
          type: string
          example: Some error description.
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047